name: CI & Publish

on:
  push:
    branches: [main, master]
    tags: ['v*']        # keep
  pull_request:

permissions:
  contents: write       # << was read; needed for GitHub Release
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      # ---- Lint ----
      - name: Lint (ruff + black)
        run: |
          python -m pip install -U pip
          pip install ruff black
          ruff check .
          black --check .

      # ---- Install, Train, Unit Tests ----
      - name: Install, Train, Unit Tests
        env:
          MODEL_VERSION: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || 'dev' }}
        run: |
          pip install -r requirements.txt pytest
          python src/train.py
          PYTHONPATH=$(pwd) pytest -q

      # ---- Upload training artifacts ----
      - name: Upload training artifacts
        uses: actions/upload-artifact@v4
        with:
          name: model-artifacts
          path: |
            artifacts/model.joblib
            artifacts/meta.json
            artifacts/metrics.json
          if-no-files-found: error

      # ---- Docker tagging metadata ----
      - name: Docker meta (tags/labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ format('ghcr.io/{0}', github.repository || '') }}
          flavor: |
            latest=false
          tags: |
            type=ref,event=tag
            type=ref,event=branch
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      # ---- Build (load for smoke), no push ----
      - name: Build (load for smoke)
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          push: false
          tags: local/test:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            MODEL_VERSION=${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || 'dev' }}

      # ---- Smoke test container (health + predict) ----
      - name: Smoke test
        shell: bash
        run: |
          set -euo pipefail
          CID=smoke
          docker run -d --name "$CID" -p 8000:8000 local/test:latest
          trap 'docker logs "$CID" || true; docker rm -f "$CID" || true' EXIT

          # wait until healthy
          for i in {1..30}; do
            if curl -fsS http://localhost:8000/health >/dev/null; then
              break
            fi
            sleep 1
          done

          # predict payload (assignment spec)
          curl -fsS -X POST http://localhost:8000/predict \
            -H 'content-type: application/json' \
            -d '{"age":0.02,"sex":-0.044,"bmi":0.06,"bp":-0.03,"s1":-0.02,"s2":0.03,"s3":-0.02,"s4":0.02,"s5":0.02,"s6":-0.001}' \
            | grep -q '"prediction":'

          docker stop "$CID"

      # ---- Login then Build & Push to GHCR ----
      - name: Login to GHCR
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push (tag-driven)
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            MODEL_VERSION=${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || 'dev' }}

      # ---- Create GitHub Release on tag, attach metrics/meta ----
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          generate_release_notes: true
          files: |
            artifacts/metrics.json
            artifacts/meta.json
